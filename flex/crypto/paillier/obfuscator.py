#
#  Copyright 2020 The FLEX Authors. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

import random

from .. import gmpy_math
from .keypair import PaillierPublicKey


def apply_obfuscation(ciphertext: int, pub_key: PaillierPublicKey, random_value: int = None) -> int:
    """
    Apply obfuscation to input, using a random number generated by system or user use.
    Attention, This operation cost a lot of computation. Powmod is a hard problem to do.
    Args:
        ciphertext: int, as input number.
        pub_key: PaillierPublicKey.
        random_value: int, used to do obfuscate if given, otherwise use system generated random number.

    Returns: 
        int, number that has been obfuscated.
    """
    r = random_value or random.SystemRandom().randrange(1, pub_key.n)
    obfuscator = gmpy_math.powmod(r, pub_key.n, pub_key.nsquare)
    return gmpy_math.mulmod(ciphertext, obfuscator, pub_key.nsquare)
